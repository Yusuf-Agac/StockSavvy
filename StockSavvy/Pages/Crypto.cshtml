@page
@model StockSavvy.Pages.CryptoModel
@{
    ViewData["Title"] = "Crypto";
}
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">

<h1>Crypto</h1>
<form asp-page-handler="CryptoRequest" method="post" class="form-floating">
    <input class="" style="width: 30%;" type="search" placeholder="Type stock code (eg. AMZN)"
           asp-for="CryptoCode" id="CryptoInput" />
    <button style="background: deepskyblue" class="btn btn-outline-primary">Search</button>
</form>
<h3>@Model.Price</h3>
@if (Model.CryptoCode != null)
{
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@@mdo">Buy or sell</button>
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>@Model.CryptoCode</h3>
                </div>
                <div class="modal-body">
                    <h5>@Model.Price</h5>
                </div>
                <div class="modal-footer">
                    <form asp-page-handler="BuyRequest" method="post">
                        <input value="@Model.CryptoCode.ToUpper()" style="display: none" asp-for="CryptoCode"></input>
                        <input value="@Model.Price" asp-for="Price" style="display: none"></input>

                        <input type="number" class="form-control" id="recipient-name" placeholder="Amount buy" asp-for="Amount">
                        <button style="background: green" class="btn btn-primary">Buy</button>
                    </form>
                    <form asp-page-handler="SellRequest" method="post">
                        <input type="number" class="form-control" id="recipient-name" placeholder="Amount sell" asp-for="Amount">
                        <input value="@Model.CryptoCode.ToUpper()" asp-for="CryptoCode" style="display: none"></input>
                        <input value="@Model.Price" asp-for="Price" style="display: none"></input>


                        <button style="background: red" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">Sell</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <h1>Satmazsan zararda değilsin!</h1>
                          <canvas id="stockChart" width="400" height="200"></canvas>
}
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const CryptoName = document.getElementById('CryptoInput').value;
        console.log(CryptoName);
        let price = [];
        let time = [];
        async function fetchData() {
          try {
            const response = await fetch("https://api.binance.com/api/v3/klines?symbol=" + CryptoName +"USDT&interval=15m&limit=20");
            const data = await response.json();
        
            for (var i = 0; i < data.length; i++) {
              price.push(data[i][4]);
              time.push(data[i][0]);
            }
            // convert time array unix time to human readable time
            const formattedTime = time.map((timestamp) => {
              const date = new Date(timestamp);
              return date.toLocaleString(); // Adjust the formatting as needed
            });
            console.log(formattedTime);
            var ctx = document.getElementById('stockChart').getContext('2d');
                    // Clamp the minimum and maximum values
                    var minValue = Math.min(...price);
                    var maxValue = Math.max(...price);
                    console.log(minValue);
                    console.log(maxValue);
            
                    // Calculate the range of values
                    var valueRange = maxValue - minValue;
            
                    // Adjust the y-axis scale to fit the clamped range
                    var suggestedMin = minValue - (valueRange * 0.01); // Adjust the factor (0.1) as needed
                    var suggestedMax = maxValue + (valueRange * 0.01); // Adjust the factor (0.1) as needed
                    console.log(suggestedMin);
                    console.log(suggestedMax);
            
                    // Define the gradient colors based on the last value minus the first value
                    var lastValue = price[price.length - 1];
                    var firstValue = price[0];
            
                    var gradientColorStart;
                    var gradientColorEnd;
            
                    if (lastValue - firstValue > 0) {
                        gradientColorStart = 'rgba(46, 204, 113, 0)'; // Transparent Green
                        gradientColorEnd = 'rgba(46, 204, 113, 1)'; // Green
                        var gradientFill = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height * 2);
                        gradientFill.addColorStop(0, gradientColorEnd);
                        gradientFill.addColorStop(1, gradientColorStart);
                    } else {
                        gradientColorStart = 'rgba(255, 50, 50, 0.75)'; // Red
                        gradientColorEnd = 'rgba(255, 50, 50, 0)'; // Transparent Red
                        var gradientFill = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height * 2);
                        gradientFill.addColorStop(0, gradientColorEnd);
                        gradientFill.addColorStop(1, gradientColorStart);
                    }
            
                    // Create the chart
                    var stockChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: formattedTime,
                            datasets: [{
                                label: CryptoName,
                                data: price,
                                backgroundColor: gradientFill,
                                borderColor: 'rgba(25, 25, 25, 1)',
                                borderWidth: 1.5,
                                fill: true
                            }]
                        },
                        options: {
                            tension: 0.5,
                            responsive: true,
                            scales: {
                                y: {
                                    suggestedMin: suggestedMin,
                                    suggestedMax: suggestedMax
                                }
                            }
                        },
                        plugins: [{
                            id: 'gradientBg',
                            beforeDraw: (chart, args, options) => {
                                const ctx = chart.canvas.getContext('2d');
                                const chartArea = chart.chartArea;
                                const { top, right, bottom, left, width, height } = chartArea;
                                const gradient = ctx.createLinearGradient(left, bottom, left, top);
                                gradient.addColorStop(0, gradientColorStart);
                                gradient.addColorStop(1, gradientColorEnd);
                                stockChart.data.datasets[0].backgroundColor = gradient;
                            }
                        }]
                    });
                    function handleResize() {
                        stockChart.resize(); // Resize the chart when the window changes size
                    }
                    // Add event listener for window resize
                    window.addEventListener('resize', handleResize);
            } catch (error) {
                // Handle any errors that occurred during the request
                console.error('Error:', error);
            }
        }
        // Call the async function to fetch data
        fetchData();

        const exampleModal = document.getElementById('exampleModal')
        if (exampleModal) {
            exampleModal.addEventListener('show.bs.modal', event => {
                // Button that triggered the modal
                const button = event.relatedTarget
                // Extract info from data-bs-* attributes
                const recipient = button.getAttribute('data-bs-whatever')
                // If necessary, you could initiate an Ajax request here
                // and then do the updating in a callback.

                // Update the modal's content.
                const modalTitle = exampleModal.querySelector('.modal-title')
                const modalBodyInput = exampleModal.querySelector('.modal-body input')

                modalTitle.textContent = `New message to ${recipient}`
                modalBodyInput.value = recipient
            })
        }
    
    
    
    
    </script>
    <script>
        const exampleModal = document.getElementById('exampleModal')
                if (exampleModal) {
                    exampleModal.addEventListener('show.bs.modal', event => {
                        // Button that triggered the modal
                        const button = event.relatedTarget
                        // Extract info from data-bs-* attributes
                        const recipient = button.getAttribute('data-bs-whatever')
                        // If necessary, you could initiate an Ajax request here
                        // and then do the updating in a callback.
        
                        // Update the modal's content.
                        const modalTitle = exampleModal.querySelector('.modal-title')
                        const modalBodyInput = exampleModal.querySelector('.modal-body input')
        
                        modalTitle.textContent = `New message to ${recipient}`
                        modalBodyInput.value = recipient
                    })
                }
    </script>
}