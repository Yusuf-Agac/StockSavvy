@page
@model PortfolioModel

<!DOCTYPE html>
<html>
<head>
    <title>Stock Portfolio</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }

        .portfolio-container {
            background-color: #fff;
            border-radius: 10px;
            padding: 20px;
        }

        .stock-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .stock-image {
            width: 50px;
            height: 50px;
            margin-right: 10px;
        }

        .stock-code {
            margin-left: 5px; /* Adjust the margin as needed */
        }
    </style>
</head>
<body>
<div class="container mt-5">
    <div class="row">
        <div class="col-md-3">
            <div class="portfolio-container">
                <h3>Stock Portfolio</h3>
                @foreach (var stock in Model.stocks)
                {
                    <div class="stock-item">
                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Apple-logo.png/640px-Apple-logo.png" alt="@stock.StockCode" class="stock-image">
                        <span class="stock-code">@stock.StockCode.ToUpper()</span>
                        <span class="ml-auto">$@(stock.Amount * stock.AverageCost)</span>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-3">
            <div class="portfolio-container">
                <canvas id="donut-chart"></canvas>
            </div>
        </div>
        <div class="col-md-6">
            <div class="chart-container">
                <div class="portfolio-container">
                    @foreach (var stock in Model.stocks)
                    {
                        Console.WriteLine(@Model.GetStockPrice(stock.StockCode));
                    }
                    <canvas id="earnings-chart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
</body>
</html>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    var palette = ['#F66D44', '#E6F69D', '#8d81b2', '#AADEA7', '#d44848', '#2D87BB',  '#9d725e', '#5ec6ec', '#86a4a6', '#64C2A6', '#FEAE65', '#ef8cdd'];
    var portfolioData = @Html.Raw(Json.Serialize(Model.stocks));
    //this is a sample for using data: var stockPrices = dataList.map(data => parseFloat(data['4. close']));
    var stockData = portfolioData.map(stock => ({
        symbol: stock['stockCode'].toUpperCase(),
        value: stock['amount'] * stock['averageCost'],
        averageCost: stock['averageCost'],
        amount: stock['amount']
    }));
    
    var donutChart = new Chart(document.getElementById('donut-chart'), {
        type: 'doughnut',
        data: {
            labels: stockData.map(stock => stock.symbol),
            usePointStyle: true,
            datasets: [{
                data: stockData.map(stock => stock.value),
                backgroundColor: palette.slice(0, stockData.length),
                borderRadius: 10
            }],
        },
        options: {
            animation: {
                animateScale: true, // Add animation to scale the chart
                animateRotate: true // Add animation to rotate the chart
            },
            responsive: true,
            cutout: '80%',
            plugins: {
                legend: {
                    position: 'right',
                    labels: {
                        usePointStyle: true,
                        padding: 10,
                        boxWidth: 3
                    }
                }
            },
            tooltips: {
                callbacks: {
                    label: function (tooltipItem, data) {
                        var dataset = data.datasets[tooltipItem.datasetIndex];
                        var index = tooltipItem.index;
                        var value = dataset.data[index];
                        var symbol = data.labels[index];
                        return symbol + ": $" + value + "";
                    }
                }
            }
        }
    });
    function handleResize() {
        donutChart.resize(); // Resize the chart when the window changes size
    }
    // Add event listener for window resize
    window.addEventListener('resize', handleResize);
</script>
    <script>
        var portfolioData = @Html.Raw(Json.Serialize(Model.stocks));
        var prices = @Html.Raw(Json.Serialize(Model.prices));
        var stockData = portfolioData.map(stock => ({
            symbol: stock['stockCode'].toUpperCase(),
            value: stock['amount'] * stock['averageCost'],
            averageCost: stock['averageCost'],
            amount: stock['amount']
        }));
        var stockPrices = prices.map(price => ({
            symbol: price['stockCode'].toUpperCase(),
            price: price['price']
        }));
        
        // get earnings stockPrices.price minus stockData.averageCost multiplied by stockData.amount compare with symbol
        var earnings = stockData.map(stock => {
            var matchingPrice = stockPrices.find(price => price.symbol === stock.symbol);
            var earningsValue = (matchingPrice.price - stock.averageCost) * stock.amount;
            return {
                symbol: stock.symbol,
                value: earningsValue
            };
        });
        
            
        // Calculate total earnings
        const totalEarnings = earnings.reduce((total, stock) => total + stock.value, 0);
        
        // Clamp the minimum and maximum values
        const minValue = Math.min(Math.min(...earnings.map(stock => stock.value), totalEarnings));
        const maxValue = Math.max(Math.max(...earnings.map(stock => stock.value), totalEarnings));

        // Calculate the suggested minimum and maximum values
        var SuggestedMin = minValue * 1.1;
        var SuggestedMax = maxValue * 1.1;
        

        // Create the chart
        const ctx = document.getElementById('earnings-chart').getContext('2d');
        var chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Total Earnings', ...earnings.map(stock => stock.symbol)],
                datasets: [{
                    label: 'Stock Earnings',
                    data: [totalEarnings, ...earnings.map(stock => stock.value)],
                    backgroundColor: [totalEarnings < 0 ? 'rgba(255, 100, 100, 0.70)' : 'rgba(100, 255, 100, 0.7)', ...earnings.map(earnings => earnings.value < 0 ? 'rgba(255, 100, 100, 0.7)' : 'rgba(100, 255, 100, 0.7)')],
                    borderWidth: 2,
                    borderColor: [totalEarnings < 0 ? 'rgba(255, 0, 0, 1)' : 'rgba(0, 210, 0, 1)', ...earnings.map(earnings => earnings.value < 0 ? 'rgba(255, 0, 0, 1)' : 'rgba(0, 210, 0, 1)')],
                    borderRadius: 5,
                    borderSkipped: false,
                }]
            },
            options: {
                responsive: true,
                legend: {
                    display: false
                },
                scales: {
                    y: {
                        suggestedMin: SuggestedMin,
                        suggestedMax: SuggestedMax
                    }
                }
            }
        });
        function handleResize() {
            chart.resize(); // Resize the chart when the window changes size
        }
        // Add event listener for window resize
        window.addEventListener('resize', handleResize);
    
    </script>
}